{"version":3,"file":"foundations-designTokens-color-colors-stories-mdx.b039da22.iframe.bundle.js","mappings":";;AAsBA;;AAEA;;AAgDA","sources":["webpack://@lokalise/louis/./src/foundations/designTokens/color/colors.stories.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport addons from '@storybook/addons';\nimport { NAVIGATE_URL } from '@storybook/core-events';\nimport { Meta, Story, ColorPalette, ColorItem } from '@storybook/addon-docs';\nimport { themes, ThemeProvider, ensure } from '@storybook/theming';\nimport LinkTo from '@storybook/addon-links/react';\nimport { styled } from '../../../utils/styled';\nimport { palette } from '.';\nexport const Template = (args, context) => {\n  window.setTimeout(() => {\n    addons.getChannel().emit(NAVIGATE_URL, `?path=/docs/${context.id}`);\n  }, 0);\n  const colorTheme = context?.globals?.backgrounds?.value === '#2D2E30' ? 'dark' : 'light';\n  const StyledColorContainer = styled.div`\n\t\tpadding: 10px;\n\t\tbackground-color: ${context?.globals?.backgrounds?.value};\n\t\t&& * {\n\t\t\tcolor: ${colorTheme === 'dark' ? '#ffffff' : undefined};\n\t\t}\n\t`;\n  const transformColorData = palette => {\n    return Object.entries(palette).flatMap(([groupName, groupValue]) => {\n      const groupEntries = Object.entries(groupValue);\n      if (!!groupEntries[0][1][colorTheme]) {\n        // Main colors\n        return {\n          title: groupName,\n          colors: Object.entries(groupValue).reduce((acc, [key, value]) => ({\n            ...acc,\n            [key]: value[colorTheme]\n          }), {})\n        };\n      } else if (groupEntries[0][0] === 'light') {\n        // Neutral colors\n        return {\n          title: groupName,\n          colors: Object.entries(groupValue).reduce((acc, [key, value]) => {\n            let result;\n            if (key === colorTheme && typeof value === 'string' && (value.match(/^#/) || value.match(/^rgb/))) {\n              result = {\n                ...acc,\n                ['']: value\n              };\n            } else {\n              result = {\n                ...acc\n              };\n            }\n            return result;\n          }, {})\n        };\n      }\n      // Interactive colors\n      return groupEntries.map(([subGroupName, subGroupValue]) => {\n        return {\n          title: groupName,\n          subTitle: subGroupName,\n          colors: Object.entries(subGroupValue).reduce((acc, [key, value]) => ({\n            ...acc,\n            [key]: value[colorTheme]\n          }), {})\n        };\n      });\n    });\n  };\n  return (\n    // Calling Storybook ThemeProvider here as ColorPalette expects to have the context from a Docs page\n    // but we're calling it inside a Story template here to have access to the currently selected theme from\n    // the theme switcher.\n    <ThemeProvider theme={ensure(themes.light)} mdxType=\"ThemeProvider\">\n\t\t\t<StyledColorContainer mdxType=\"StyledColorContainer\">\n\t\t\t\t<ColorPalette mdxType=\"ColorPalette\">\n\t\t\t\t\t{transformColorData(palette).map(({\n            title,\n            subTitle,\n            colors\n          }) => <ColorItem key={`${title}.${subTitle}`} title={title} subtitle={subTitle} colors={colors} mdxType=\"ColorItem\" />)}\n\t\t\t\t</ColorPalette>\n\t\t\t</StyledColorContainer>\n\t\t</ThemeProvider>\n  );\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StyledColorContainer = makeShortcode(\"StyledColorContainer\");\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Foundations/Design Tokens/Colors\" parameters={{\n      viewMode: 'docs',\n      previewTabs: {\n        canvas: {\n          hidden: true\n        }\n      },\n      controls: {\n        disable: true\n      },\n      actions: {\n        disable: true\n      }\n    }} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#color-palette\"\n        }}>{`Color palette`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Use the Theme Switcher to view the `}<inlineCode parentName=\"p\">{`light`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`dark`}</inlineCode>{` color palettes. Refer to `}<LinkTo kind=\"Foundations/Theming/Theme Helpers\" mdxType=\"LinkTo\">{`Theme Helpers`}</LinkTo>{` for additional information on how to use colors in components.`}</p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { color } from '@lokalise/louis';\nimport styled from 'styled-components';\n\nconst StyledParagraph = styled.p\\`\n    \\${color('content.primary')};\n\\`;\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://www.figma.com/file/zfCOLmZam4nrttG6IVzQyz/Louis?node-id=5398%3A21832\" target=\"_blank\">\n\tFigma Source File | Colors\n        </a>\n      </li>\n    </ul>\n    <h2 id=\"examples\">Color palette</h2>\n    <Story name=\"Colors\" mdxType=\"Story\"> {Template.bind({})}</Story>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const colors = Template.bind({});\ncolors.storyName = 'Colors';\ncolors.parameters = { storySource: { source: '(args, context) => {\\n  window.setTimeout(() => {\\n    addons.getChannel().emit(NAVIGATE_URL, `?path=/docs/${context.id}`);\\n  }, 0);\\n  const colorTheme = context?.globals?.backgrounds?.value === \\'#2D2E30\\' ? \\'dark\\' : \\'light\\';\\n  const StyledColorContainer = styled.div`\\n\t\tpadding: 10px;\\n\t\tbackground-color: ${context?.globals?.backgrounds?.value};\\n\t\t&& * {\\n\t\t\tcolor: ${colorTheme === \\'dark\\' ? \\'#ffffff\\' : undefined};\\n\t\t}\\n\t`;\\n  const transformColorData = palette => {\\n    return Object.entries(palette).flatMap(([groupName, groupValue]) => {\\n      const groupEntries = Object.entries(groupValue);\\n      if (!!groupEntries[0][1][colorTheme]) {\\n        // Main colors\\n        return {\\n          title: groupName,\\n          colors: Object.entries(groupValue).reduce((acc, [key, value]) => ({\\n            ...acc,\\n            [key]: value[colorTheme]\\n          }), {})\\n        };\\n      } else if (groupEntries[0][0] === \\'light\\') {\\n        // Neutral colors\\n        return {\\n          title: groupName,\\n          colors: Object.entries(groupValue).reduce((acc, [key, value]) => {\\n            let result;\\n            if (key === colorTheme && typeof value === \\'string\\' && (value.match(/^#/) || value.match(/^rgb/))) {\\n              result = {\\n                ...acc,\\n                [\\'\\']: value\\n              };\\n            } else {\\n              result = {\\n                ...acc\\n              };\\n            }\\n            return result;\\n          }, {})\\n        };\\n      }\\n      // Interactive colors\\n      return groupEntries.map(([subGroupName, subGroupValue]) => {\\n        return {\\n          title: groupName,\\n          subTitle: subGroupName,\\n          colors: Object.entries(subGroupValue).reduce((acc, [key, value]) => ({\\n            ...acc,\\n            [key]: value[colorTheme]\\n          }), {})\\n        };\\n      });\\n    });\\n  };\\n  return (\\n    // Calling Storybook ThemeProvider here as ColorPalette expects to have the context from a Docs page\\n    // but we\\'re calling it inside a Story template here to have access to the currently selected theme from\\n    // the theme switcher.\\n    <ThemeProvider theme={ensure(themes.light)}>\\n\t\t\t<StyledColorContainer>\\n\t\t\t\t<ColorPalette>\\n\t\t\t\t\t{transformColorData(palette).map(({\\n            title,\\n            subTitle,\\n            colors\\n          }) => <ColorItem key={`${title}.${subTitle}`} title={title} subtitle={subTitle} colors={colors} />)}\\n\t\t\t\t</ColorPalette>\\n\t\t\t</StyledColorContainer>\\n\t\t</ThemeProvider>\\n  );\\n}' } };\n\nconst componentMeta = { title: 'Foundations/Design Tokens/Colors', parameters: {\n  viewMode: 'docs',\n  previewTabs: {\n    canvas: {\n      hidden: true\n    }\n  },\n  controls: {\n    disable: true\n  },\n  actions: {\n    disable: true\n  }\n}, includeStories: [\"colors\"],  };\n\nconst mdxStoryNameToKey = {\"Colors\":\"colors\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}