{"version":3,"file":"components-Card-Card-stories-mdx.b1381a35.iframe.bundle.js","mappings":";;;AAsBA;AAEA;;AAIA;AAEA;AACA;AAGA;;;;;ACDA;AACA;AACA;AACA;AAGA","sources":["webpack://@lokalise/louis/./src/components/Card/Card.stories.mdx","webpack://@lokalise/louis/./src/foundations/icons/styles.ts"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '../../utils/styled';\nimport { color, typography } from '../../utils/theme';\nimport { Flex, Checkbox, Tag } from '..';\nimport { Card } from '.';\nexport const Template = args => <Card {...args} mdxType=\"Card\" />;\nexport const GlossaryTemplate = args => {\n  const {\n    onChange,\n    ...restArgs\n  } = args;\n  const StyledTitle = styled.span`\n\t\tfont-size: 16px;\n\t\tfont-weight: bold;\n\t\tcolor: ${color('primary.500')};\n\t`;\n  StyledTitle.displayName = 'StyledTitle';\n  const InnerContainer = styled(Flex)`\n\t\tpadding: 10px 30px 10px 25px;\n\t`;\n  InnerContainer.displayName = 'InnerContainer';\n  const StyledMessage = styled.span`\n\t\t${typography('message')};\n\t\tcolor: ${color('content.secondary')};\n\t`;\n  StyledMessage.displayName = 'StyledMessage';\n  return <Card {...restArgs} mdxType=\"Card\">\n\t\t\t<Flex mdxType=\"Flex\">\n\t\t\t\t<Checkbox mdxType=\"Checkbox\">\n\t\t\t\t\t<StyledTitle mdxType=\"StyledTitle\">Term name</StyledTitle>\n\t\t\t\t</Checkbox>\n\t\t\t\t<InnerContainer gap={3} mdxType=\"InnerContainer\">\n\t\t\t\t\t<StyledMessage mdxType=\"StyledMessage\">\n\t\t\t\t\t\tTemporibus dolor sit amet, consectetur adipiscing elit. Dolore euismod temporibus. Lorem ipsum\n\t\t\t\t\t\tdolor sit amet, officia excepteur ex fugiat reprehenderit enim labore culpa.\n\t\t\t\t\t</StyledMessage>\n\t\t\t\t\t<Flex gap={1} mdxType=\"Flex\">\n\t\t\t\t\t\t<Tag mdxType=\"Tag\">Translatable</Tag>\n\t\t\t\t\t\t<Tag mdxType=\"Tag\">Case sensitive</Tag>\n\t\t\t\t\t\t<Tag variant=\"outlined\" mdxType=\"Tag\">Tech</Tag>\n\t\t\t\t\t\t<Tag variant=\"outlined\" mdxType=\"Tag\">Marketing</Tag>\n\t\t\t\t\t</Flex>\n\t\t\t\t\t<StyledMessage mdxType=\"StyledMessage\">10 Oct, 2010 â€¢ Super Admin</StyledMessage>\n\t\t\t\t</InnerContainer>\n\t\t\t</Flex>\n\t\t</Card>;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StyledTitle = makeShortcode(\"StyledTitle\");\nconst InnerContainer = makeShortcode(\"InnerContainer\");\nconst StyledMessage = makeShortcode(\"StyledMessage\");\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Components/Card\" component={Card} parameters={{\n      controls: {\n        exclude: ['children']\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} decorators={[Story => <div style={{\n      display: 'flex',\n      width: 300,\n      margin: '0 auto',\n      gap: 20,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }}>\n\t\t\t\t{Story()}\n\t\t\t</div>]} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"card\"\n    }}>{`Card`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Card is used to create pre-defined box layout.`}</p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Card } from '@lokalise/louis';\n\nexport default () => <Card>Card content</Card>;\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://www.figma.com/file/zfCOLmZam4nrttG6IVzQyz/Louis?node-id=4032%3A28123\" target=\"_blank\">\n\tFigma Source File | Card\n        </a>\n      </li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Card} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3 {...{\n      \"id\": \"default\"\n    }}>{`Default`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Default\" args={{\n        children: <span>\n\t\t\t\t\tTemporibus dolor sit amet, consectetur adipiscing elit. Dolore euismod temporibus. Lorem ipsum dolor\n\t\t\t\t\tsit amet, officia excepteur ex fugiat reprehenderit enim labore culpa sint ad nisi. Lorem pariatur\n\t\t\t\t\tmollit ex esse exercitation amet. Nisi anim cupidatat excepteur officia. Reprehenderit nostrud\n\t\t\t\t\tnostrud ipsum. Lorem est aliquip amet voluptate voluptate dolor minim nulla.\n\t\t\t\t</span>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"render-as-different-container\"\n    }}>{`Render as different container`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Render as different container\" args={{\n        as: 'article',\n        children: <span>This content will be rendered inside 'article' element.</span>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"used-as-glossary-term\"\n    }}>{`Used as Glossary term`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Used as Glossary term\" args={{}} mdxType=\"Story\">\n\t\t{GlossaryTemplate.bind({})}\n\t</Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.args = {\n  children: <span>\n\t\t\t\t\tTemporibus dolor sit amet, consectetur adipiscing elit. Dolore euismod temporibus. Lorem ipsum dolor\n\t\t\t\t\tsit amet, officia excepteur ex fugiat reprehenderit enim labore culpa sint ad nisi. Lorem pariatur\n\t\t\t\t\tmollit ex esse exercitation amet. Nisi anim cupidatat excepteur officia. Reprehenderit nostrud\n\t\t\t\t\tnostrud ipsum. Lorem est aliquip amet voluptate voluptate dolor minim nulla.\n\t\t\t\t</span>\n};\ndefaultStory.parameters = { storySource: { source: 'Template.bind({})' } };\n\nexport const renderAsDifferentContainer = Template.bind({});\nrenderAsDifferentContainer.storyName = 'Render as different container';\nrenderAsDifferentContainer.args = {\n  as: 'article',\n  children: <span>This content will be rendered inside 'article' element.</span>\n};\nrenderAsDifferentContainer.parameters = { storySource: { source: 'Template.bind({})' } };\n\nexport const usedAsGlossaryTerm = GlossaryTemplate.bind({});\nusedAsGlossaryTerm.storyName = 'Used as Glossary term';\nusedAsGlossaryTerm.args = {};\nusedAsGlossaryTerm.parameters = { storySource: { source: 'GlossaryTemplate.bind({})' } };\n\nconst componentMeta = { title: 'Components/Card', parameters: {\n  controls: {\n    exclude: ['children']\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => <div style={{\n  display: 'flex',\n  width: 300,\n  margin: '0 auto',\n  gap: 20,\n  justifyContent: 'center',\n  alignItems: 'center'\n}}>\n\t\t\t\t{Story()}\n\t\t\t</div>], component: Card, includeStories: [\"defaultStory\",\"renderAsDifferentContainer\",\"usedAsGlossaryTerm\"],  };\n\nconst mdxStoryNameToKey = {\"Default\":\"defaultStory\",\"Render as different container\":\"renderAsDifferentContainer\",\"Used as Glossary term\":\"usedAsGlossaryTerm\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import { css, styled, type StyledProps } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type SvgIconColor = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n\tcolor?: SvgIconColor;\n\tfill?: SvgIconColor;\n\tstroke?: SvgIconColor;\n\tsize?: string;\n};\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n\tcolor: 'inherit',\n\tfill: 'currentColor',\n\tstroke: undefined,\n};\n\nconst colorHelper = (\n\tcolorType: keyof typeof colorTypesDefaults,\n\tinputColor: SvgIconColor | undefined,\n\tprops: StyledProps<unknown>,\n) =>\n\tinputColor && !reservedKeywords.includes(inputColor)\n\t\t? color(inputColor as NamedColor)(props)\n\t\t: colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n\tpointer-events: all;\n\tbox-sizing: border-box;\n\tcolor: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n\tfill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n\tstroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n\tfont-size: ${(props) => props.size};\n`;\n\nconst commonExcludedProps = ['fill', 'color', 'stroke'];\nexport const SvgRoot = styled.svg.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n\twidth: 1em;\n\theight: 1em;\n`;\n\nexport const SvgIconPath = styled.path.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconRect = styled.rect.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconG = styled.g.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconCircle = styled.circle.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconLinearGradient = styled.linearGradient.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconDefs = styled.defs.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconStop = styled.stop.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n\nexport const SvgIconClipPath = styled.clipPath.withConfig<SvgProps>({\n\tshouldForwardProp: excludeProps(commonExcludedProps),\n})`\n\t${commonStyles};\n`;\n"],"names":[],"sourceRoot":""}