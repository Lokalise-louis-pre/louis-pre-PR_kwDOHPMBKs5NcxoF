{"version":3,"file":"components-Popover-Popover-stories-mdx.75ae0a66.iframe.bundle.js","mappings":";AAcA;AACA;;;;;;;;;ACCA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAgBA","sources":["webpack://@lokalise/louis/./src/components/Popover/Popover.stories.mdx","webpack://@lokalise/louis/./src/components/Popover/styles.ts"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '../../utils/styled';\nimport { color } from '../../utils/theme';\nimport { Button } from '../Button';\nimport { Popover } from './Popover';\nexport const PopoverContent = Object.assign(styled.div`\n\t\tcolor: ${color('content.primary')};\n\t`, {\n  displayName: 'div'\n});\nexport const Template = args => <Popover {...args} mdxType=\"Popover\" />;\n\nconst layoutProps = {\n  PopoverContent,\nTemplate\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/Popover\" component={Popover} parameters={{\n      controls: {\n        sort: 'requiredFirst',\n        exclude: ['children', 'content', 'components']\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} decorators={[Story => <div style={{\n      margin: '45px'\n    }}>{Story()}</div>]} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"popover\"\n    }}>{`Popover`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Popover is used to display in-product help content, attached to the child element passed to it.`}</p>\n    <p>{`Popover depends on:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://floating-ui.com/\" target=\"_blank\">\n\tFloating UI\n        </a>\n      </li>\n    </ul>\n    <p><strong parentName=\"p\">{`*`}{` NOTE:`}</strong>{` The `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` relies on user interactions for the trigger, and we do not want to modify its styles through Popover. Therefore, we do not recommend using `}<inlineCode parentName=\"p\">{`styled(Popover)`}</inlineCode>{` directly. If you wish to customize the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{`, you can provide your own `}<inlineCode parentName=\"p\">{`Content`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Arrow`}</inlineCode>{` components via the `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` prop.`}</p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Popover } from '@lokalise/louis';\n\nexport default () => (\n  <Popover content=\"Popover content\">Hello World</Popover>;\n)\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://www.figma.com/file/zfCOLmZam4nrttG6IVzQyz/UI-Library?node-id=4029%3A21088\" target=\"_blank\">\n\tFigma Source File | Popover\n        </a>\n      </li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Popover} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3 {...{\n      \"id\": \"trigger-event\"\n    }}>{`Trigger Event`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"On Click\" args={{\n        withArrow: true,\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">On click</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n\t<Story name=\"On Hover\" args={{\n        withArrow: true,\n        triggerEvent: 'hover',\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">On hover</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n\t<Story name=\"On Disabled Hover\" args={{\n        withArrow: true,\n        triggerEvent: 'hover',\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <div>\n\t\t\t\t\t<Button variant=\"outline\" disabled mdxType=\"Button\">\n\t\t\t\t\t\tOn disabled hover\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"offset\"\n    }}>{`Offset`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Offset\" args={{\n        withArrow: false,\n        offset: 5,\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Offset: 5</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"placements\"\n    }}>{`Placements`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Placement\" args={{\n        withArrow: true,\n        placement: 'right',\n        open: true,\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Right</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Right</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"delay\"\n    }}>{`Delay`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Delay\" args={{\n        triggerEvent: 'hover',\n        delay: 2000,\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Delay 2 seconds</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"render-in-portal\"\n    }}>{`Render in Portal`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Portal\" args={{\n        inPortal: true,\n        content: <PopoverContent style={{\n          padding: '16px'\n        }} mdxType=\"PopoverContent\">Rendered in `div.louis-portal`</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Open in Portal</Button>\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const onClick = Template.bind({});\nonClick.storyName = 'On Click';\nonClick.args = {\n  withArrow: true,\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">On click</Button>\n};\nonClick.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const onHover = Template.bind({});\nonHover.storyName = 'On Hover';\nonHover.args = {\n  withArrow: true,\n  triggerEvent: 'hover',\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">On hover</Button>\n};\nonHover.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const onDisabledHover = Template.bind({});\nonDisabledHover.storyName = 'On Disabled Hover';\nonDisabledHover.args = {\n  withArrow: true,\n  triggerEvent: 'hover',\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <div>\n\t\t\t\t\t<Button variant=\"outline\" disabled>\n\t\t\t\t\t\tOn disabled hover\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n};\nonDisabledHover.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const offset = Template.bind({});\noffset.storyName = 'Offset';\noffset.args = {\n  withArrow: false,\n  offset: 5,\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">Offset: 5</Button>\n};\noffset.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const placement = Template.bind({});\nplacement.storyName = 'Placement';\nplacement.args = {\n  withArrow: true,\n  placement: 'right',\n  open: true,\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Right</PopoverContent>,\n  children: <Button variant=\"outline\">Right</Button>\n};\nplacement.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const delay = Template.bind({});\ndelay.storyName = 'Delay';\ndelay.args = {\n  triggerEvent: 'hover',\n  delay: 2000,\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">Delay 2 seconds</Button>\n};\ndelay.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const portal = Template.bind({});\nportal.storyName = 'Portal';\nportal.args = {\n  inPortal: true,\n  content: <PopoverContent style={{\n    padding: '16px'\n  }}>Rendered in `div.louis-portal`</PopoverContent>,\n  children: <Button variant=\"outline\">Open in Portal</Button>\n};\nportal.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nconst componentMeta = { title: 'Components/Popover', parameters: {\n  controls: {\n    sort: 'requiredFirst',\n    exclude: ['children', 'content', 'components']\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => <div style={{\n  margin: '45px'\n}}>{Story()}</div>], component: Popover, includeStories: [\"onClick\",\"onHover\",\"onDisabledHover\",\"offset\",\"placement\",\"delay\",\"portal\"],  };\n\nconst mdxStoryNameToKey = {\"On Click\":\"onClick\",\"On Hover\":\"onHover\",\"On Disabled Hover\":\"onDisabledHover\",\"Offset\":\"offset\",\"Placement\":\"placement\",\"Delay\":\"delay\",\"Portal\":\"portal\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;","import type { Placement } from '@floating-ui/react';\nimport type { HTMLAttributes, RefAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, radius, typography, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n\ttop: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst top = css`\n\tbottom: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\nconst left = css`\n\tright: -5px;\n\n\t&::before {\n\t\tborder-right-width: 1px;\n\t\tborder-right-style: solid;\n\t\tborder-top-width: 1px;\n\t\tborder-top-style: solid;\n\t}\n`;\nconst right = css`\n\tleft: -5px;\n\n\t&::before {\n\t\tborder-left-width: 1px;\n\t\tborder-left-style: solid;\n\t\tborder-bottom-width: 1px;\n\t\tborder-bottom-style: solid;\n\t}\n`;\n\nexport type ArrowProps = {\n\tplacement?: Placement;\n} & HTMLAttributes<HTMLElement> &\n\tRefAttributes<HTMLElement>;\n\nexport const Arrow = styled.div<ArrowProps>`\n\tposition: absolute;\n\twidth: 8px;\n\theight: 8px;\n\tz-index: ${zIndex('hide')};\n\n\t&::before {\n\t\tposition: absolute;\n\t\twidth: 8px;\n\t\theight: 8px;\n\t\tz-index: ${zIndex('hide')};\n\t\tcontent: '';\n\t\tdisplay: block;\n\t\ttransform: rotate(45deg);\n\t\tbackground-color: ${color('background.primary')};\n\t\tborder-color: ${color('border.primary')};\n\t}\n\n\t${variants(\n\t\t'placement',\n\t\t{\n\t\t\ttop,\n\t\t\tbottom,\n\t\t\tleft,\n\t\t\tright,\n\t\t\t'right-end': right,\n\t\t\t'right-start': right,\n\t\t\t'left-start': left,\n\t\t\t'auto-end': css``,\n\t\t\t'auto-start': css``,\n\t\t\tauto: css``,\n\t\t\t'bottom-end': bottom,\n\t\t\t'bottom-start': bottom,\n\t\t\t'left-end': left,\n\t\t\t'top-end': top,\n\t\t\t'top-start': top,\n\t\t},\n\t\t'auto',\n\t)}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n\tpadding: 0;\n\tborder-radius: ${radius('md')};\n\tbackground-color: ${color('background.primary')};\n\tborder: 1px solid ${color('border.primary')};\n\tbox-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n\tz-index: ${zIndex('popover')};\n\tcolor: ${color('content.primary')};\n\tfont-family: ${fontFamily('default')};\n\t${typography('description')};\n\twidth: max-content;\n`;\n"],"names":[],"sourceRoot":""}