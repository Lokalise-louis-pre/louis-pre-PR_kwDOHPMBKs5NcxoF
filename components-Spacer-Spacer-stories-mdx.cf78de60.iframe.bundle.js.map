{"version":3,"file":"components-Spacer-Spacer-stories-mdx.cf78de60.iframe.bundle.js","mappings":";AA2DA;AACA;;;AAGA;;;;;;;;;;AAUA;AACA;;;;AAKA;AAgGA;AACA;;;AAGA;;;;;;;;;;AAUA;AACA;;;;AAKA","sources":["webpack://@lokalise/louis/./src/components/Spacer/Spacer.stories.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { color, fontFamily, typography } from '../../utils/theme';\nimport { styled } from '../../utils/styled';\nimport { Spacer } from './Spacer';\nexport const Template = args => {\n  const {\n    vertical,\n    horizontal,\n    top,\n    right,\n    bottom,\n    left,\n    ...rest\n  } = args;\n  return <Spacer vertical={vertical} horizontal={horizontal} top={top} right={right} bottom={bottom} left={left} {...rest} mdxType=\"Spacer\">\n\t\t\t<div>\n\t\t\t\t{vertical || horizontal ? [<span>{vertical && `vertical: ${vertical}`}</span>, <span>{horizontal && `horizontal: ${horizontal}`}</span>] : [<span>{top && `top: ${top}`}</span>, <span>\n\t\t\t\t\t\t\t\t{left && `left: ${left}`}\n\t\t\t\t\t\t\t\t&nbsp; &nbsp;\n\t\t\t\t\t\t\t\t{right && `right: ${right}`}\n\t\t\t\t\t\t\t</span>, <span>{bottom && `bottom: ${bottom}`}</span>]}\n\t\t\t</div>\n\t\t</Spacer>;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StoryContent = makeShortcode(\"StoryContent\");\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Components/Spacer\" component={Spacer} parameters={{\n      controls: {\n        sort: 'requiredFirst'\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} decorators={[Story => {\n      const StoryContent = styled.div`\n\t\t\t\tfont-family: ${fontFamily('default')};\n\t\t\t\t${typography('message')};\n\t\t\t\t// styled Spacer\n\t\t\t\t& > div {\n\t\t\t\t\tbackground-color: ${color('yellow.400')};\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t}\n\t\t\t\t// styled content in Spacer\n\t\t\t\t& > div > div {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tbackground-color: ${color('background.secondary')};\n\t\t\t\t\tcolor: ${color('content.secondary')};\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t}\n\t\t\t`;\n      return <StoryContent mdxType=\"StoryContent\">{Story()}</StoryContent>;\n    }]} mdxType=\"Meta\" />\n    <h1 {...{\n      \"id\": \"spacer\"\n    }}>{`Spacer`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Meant for adding space between different components. It allows extracting margins from other components which allows making components more reusable. Also, `}<inlineCode parentName=\"p\">{`Spacer`}</inlineCode>{` allows avoiding creation of custom components that are meant just for adding some margins.`}</p>\n    <p><strong parentName=\"p\">{`Keep in mind that `}<inlineCode parentName=\"strong\">{`Spacer`}</inlineCode>{` should be used only in places where using `}<inlineCode parentName=\"strong\">{`flex gap`}</inlineCode>{` and `}<inlineCode parentName=\"strong\">{`grid gap`}</inlineCode>{` doesn't make sense.`}</strong></p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Spacer } from '@lokalise/louis';\n\nexport default () => <Spacer>Hello world!</Spacer>;\n`}</code></pre>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Spacer} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3 {...{\n      \"id\": \"specific-directions\"\n    }}>{`Specific Directions`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Specific Directions\" args={{\n        top: 2,\n        right: 4,\n        bottom: 6,\n        left: 8\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    <h3 {...{\n      \"id\": \"shorthand\"\n    }}>{`Shorthand`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n\t<Story name=\"Shorthand\" args={{\n        vertical: 2,\n        horizontal: 8\n      }} mdxType=\"Story\">\n\t\t{Template.bind({})}\n\t</Story>\n    </Canvas>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const specificDirections = Template.bind({});\nspecificDirections.storyName = 'Specific Directions';\nspecificDirections.args = {\n  top: 2,\n  right: 4,\n  bottom: 6,\n  left: 8\n};\nspecificDirections.parameters = { storySource: { source: 'args => {\\n  const {\\n    vertical,\\n    horizontal,\\n    top,\\n    right,\\n    bottom,\\n    left,\\n    ...rest\\n  } = args;\\n  return <Spacer vertical={vertical} horizontal={horizontal} top={top} right={right} bottom={bottom} left={left} {...rest}>\\n\t\t\t<div>\\n\t\t\t\t{vertical || horizontal ? [<span>{vertical && `vertical: ${vertical}`}</span>, <span>{horizontal && `horizontal: ${horizontal}`}</span>] : [<span>{top && `top: ${top}`}</span>, <span>\\n\t\t\t\t\t\t\t\t{left && `left: ${left}`}\\n\t\t\t\t\t\t\t\t&nbsp; &nbsp;\\n\t\t\t\t\t\t\t\t{right && `right: ${right}`}\\n\t\t\t\t\t\t\t</span>, <span>{bottom && `bottom: ${bottom}`}</span>]}\\n\t\t\t</div>\\n\t\t</Spacer>;\\n}' } };\n\nexport const shorthand = Template.bind({});\nshorthand.storyName = 'Shorthand';\nshorthand.args = {\n  vertical: 2,\n  horizontal: 8\n};\nshorthand.parameters = { storySource: { source: 'args => {\\n  const {\\n    vertical,\\n    horizontal,\\n    top,\\n    right,\\n    bottom,\\n    left,\\n    ...rest\\n  } = args;\\n  return <Spacer vertical={vertical} horizontal={horizontal} top={top} right={right} bottom={bottom} left={left} {...rest}>\\n\t\t\t<div>\\n\t\t\t\t{vertical || horizontal ? [<span>{vertical && `vertical: ${vertical}`}</span>, <span>{horizontal && `horizontal: ${horizontal}`}</span>] : [<span>{top && `top: ${top}`}</span>, <span>\\n\t\t\t\t\t\t\t\t{left && `left: ${left}`}\\n\t\t\t\t\t\t\t\t&nbsp; &nbsp;\\n\t\t\t\t\t\t\t\t{right && `right: ${right}`}\\n\t\t\t\t\t\t\t</span>, <span>{bottom && `bottom: ${bottom}`}</span>]}\\n\t\t\t</div>\\n\t\t</Spacer>;\\n}' } };\n\nconst componentMeta = { title: 'Components/Spacer', parameters: {\n  controls: {\n    sort: 'requiredFirst'\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => {\n  const StoryContent = styled.div`\n\t\t\t\tfont-family: ${fontFamily('default')};\n\t\t\t\t${typography('message')};\n\t\t\t\t// styled Spacer\n\t\t\t\t& > div {\n\t\t\t\t\tbackground-color: ${color('yellow.400')};\n\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t}\n\t\t\t\t// styled content in Spacer\n\t\t\t\t& > div > div {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tbackground-color: ${color('background.secondary')};\n\t\t\t\t\tcolor: ${color('content.secondary')};\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\theight: 100px;\n\t\t\t\t}\n\t\t\t`;\n  return <StoryContent>{Story()}</StoryContent>;\n}], component: Spacer, includeStories: [\"specificDirections\",\"shorthand\"],  };\n\nconst mdxStoryNameToKey = {\"Specific Directions\":\"specificDirections\",\"Shorthand\":\"shorthand\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}